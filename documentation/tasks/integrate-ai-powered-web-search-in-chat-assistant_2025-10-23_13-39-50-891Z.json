[
  {
    "title": "Extend User Schema and Create Settings API",
    "description": "Add model preference columns to the user table and create API endpoint for managing user settings",
    "details": "Modify the Drizzle ORM schema to add `chat_model` and `summarization_model` columns to the user table with default values (e.g., 'gpt-4' and 'gpt-3.5-turbo'). Generate and apply the database migration. Create a new API route at `app/api/user/settings/route.ts` with GET and PUT methods to fetch and update user model preferences. Include proper validation using Zod schemas and error handling for database operations.",
    "status": "pending",
    "test_strategy": "Unit tests for the API endpoint with mocked database calls. Integration tests to verify the migration applies correctly and user preferences are persisted and retrieved accurately.",
    "priority": "high",
    "ordinal": 0,
    "task_group_id": "2e2b811c-5cab-428d-a2c4-f35197857ba2",
    "parent_task_id": null,
    "ai_result": null,
    "id": "7e4b4ee0-cbb4-43b9-a98f-be9a329edc14",
    "created_at": "2025-10-23T13:39:46.140314Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Create SearXNG Integration Service",
    "description": "Implement backend service for SearXNG API integration and Docker Compose setup",
    "details": "Create a `docker-compose.yml` file with SearXNG service configuration for local development. Implement a dedicated service module (e.g., `lib/services/searxng.ts`) that handles HTTP requests to SearXNG API, formats search queries, and parses JSON responses. Include proper error handling for network failures and invalid responses. Add environment variable configuration for SearXNG instance URL.",
    "status": "pending",
    "test_strategy": "Mock SearXNG API responses in unit tests. Test error scenarios like network timeouts and malformed responses. Verify Docker Compose setup works locally.",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "2e2b811c-5cab-428d-a2c4-f35197857ba2",
    "parent_task_id": null,
    "ai_result": null,
    "id": "6f27aea7-e589-443f-a75f-0d83b247597c",
    "created_at": "2025-10-23T13:39:46.140322Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Enhance Chat API with Search-Augmented Response",
    "description": "Modify the existing chat API endpoint to support search-enabled responses using AI SDK",
    "details": "Update `app/api/chat/route.ts` to accept a `useSearch` boolean parameter. When enabled, implement the multi-step workflow: 1) Use `generateObject` from AI SDK to convert user prompt into structured search queries, 2) Execute queries via SearXNG service, 3) Use AI SDK streaming to summarize search results with user's selected summarization model. Maintain existing direct chat functionality when search is disabled. Include proper error handling and fallback to direct chat on search failures.",
    "status": "pending",
    "test_strategy": "Unit tests with mocked AI SDK calls and SearXNG responses. Integration tests for both search-enabled and direct chat flows. Test error scenarios and fallback mechanisms.",
    "priority": "medium",
    "ordinal": 2,
    "task_group_id": "2e2b811c-5cab-428d-a2c4-f35197857ba2",
    "parent_task_id": null,
    "ai_result": null,
    "id": "f31b26a4-fd3e-4645-9a04-bb34abd1c6ff",
    "created_at": "2025-10-23T13:39:46.140324Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Build Settings Dialog Component",
    "description": "Create a reusable settings dialog for model selection using shadcn/ui components",
    "details": "Create `components/assistant-ui/settings-dialog.tsx` using shadcn/ui Dialog, Select, and Button components. Include dropdowns for chat model and summarization model selection with common AI models (GPT-4, GPT-3.5-turbo, Claude, etc.). Implement form validation and submission to the settings API endpoint. Add loading states and success/error feedback. Make the component responsive and accessible following WCAG guidelines.",
    "status": "pending",
    "test_strategy": "Component unit tests using React Testing Library. Test form validation, API integration, and accessibility features. Visual regression tests for different screen sizes.",
    "priority": "medium",
    "ordinal": 3,
    "task_group_id": "2e2b811c-5cab-428d-a2c4-f35197857ba2",
    "parent_task_id": null,
    "ai_result": null,
    "id": "1b39fde8-aecc-435f-97ed-b273e1a8873b",
    "created_at": "2025-10-23T13:39:46.140325Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Integrate Search Toggle and Settings in Chat UI",
    "description": "Add search toggle switch and settings button to the chat input interface",
    "details": "Modify `components/assistant-ui/thread.tsx` to include a search toggle switch and settings button near the chat input. Implement local state management for the search toggle and pass it to the chat API request. Add the settings dialog integration with proper state management for user preferences. Include visual indicators when search is enabled and provide streaming feedback during the search-and-summarize process (e.g., 'Searching the web...', 'Summarizing results...').",
    "status": "pending",
    "test_strategy": "Component integration tests for UI interactions. E2E tests using Playwright to verify the complete user flow from toggling search to receiving summarized responses. Test responsive behavior across different devices.",
    "priority": "medium",
    "ordinal": 4,
    "task_group_id": "2e2b811c-5cab-428d-a2c4-f35197857ba2",
    "parent_task_id": null,
    "ai_result": null,
    "id": "b2613da4-22fa-4e2a-b28c-7d2c47c0d7e8",
    "created_at": "2025-10-23T13:39:46.140326Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  }
]