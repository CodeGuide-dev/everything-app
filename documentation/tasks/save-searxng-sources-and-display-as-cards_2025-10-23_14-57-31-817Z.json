[
  {
    "title": "Create database schema for storing search sources",
    "description": "Define and implement a new database table to store search sources with URL, title, and favicon information linked to chat messages",
    "details": "Create a new Drizzle ORM schema for a 'sources' table with columns: id (primary key), message_id (foreign key to messages table), url (text), title (text), favicon_url (text, nullable), created_at (timestamp). Generate and apply the database migration using Drizzle's migration tooling. Ensure proper indexing on message_id for efficient queries when retrieving sources for a specific message.",
    "status": "pending",
    "test_strategy": "Write unit tests to verify schema definition and migration execution. Test database constraints and foreign key relationships. Validate that sources can be inserted and queried correctly with proper type safety.",
    "priority": "high",
    "ordinal": 0,
    "task_group_id": "7bde2797-2bcc-4f10-8814-513442bf950f",
    "parent_task_id": null,
    "ai_result": null,
    "id": "04148053-f28e-46d3-9356-6ecd8bff4db5",
    "created_at": "2025-10-23T14:57:25.767163Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Modify chat API to persist search sources to database",
    "description": "Update the chat API endpoint to save search sources returned from SearXNG to the database and include them in the streaming response",
    "details": "Modify app/api/chat/route.ts to extract search sources from the existing SearXNG integration. After the AI generates a response with search results, parse the sources and insert them into the sources table using Drizzle ORM, linking them to the assistant's message ID. Update the streaming response to include the sources data using Vercel AI SDK's data streaming capabilities. Implement proper error handling for database operations and ensure transactional integrity.",
    "status": "pending",
    "test_strategy": "Create integration tests for the chat API endpoint to verify sources are correctly saved to database. Mock SearXNG responses and test various scenarios including successful saves, database errors, and missing source data. Verify the streaming response includes source information.",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "7bde2797-2bcc-4f10-8814-513442bf950f",
    "parent_task_id": null,
    "ai_result": null,
    "id": "8367341d-263c-4556-b748-c345d7d921fc",
    "created_at": "2025-10-23T14:57:25.767172Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Create SourceCard component for displaying search sources",
    "description": "Build a reusable React component to display individual search sources as cards with favicon, title, and URL",
    "details": "Create components/assistant-ui/source-card.tsx component that accepts source props (url, title, favicon_url). Use shadcn/ui Card component as the base and implement a clean design showing the favicon (with fallback icon), site title, and clickable URL. Include proper accessibility attributes, hover states, and responsive design. Handle cases where favicon is missing or fails to load. Style the component to match the existing chat UI theme and support both light/dark modes.",
    "status": "pending",
    "test_strategy": "Write component tests using React Testing Library to verify proper rendering with different prop combinations. Test accessibility features, keyboard navigation, and screen reader compatibility. Test fallback behavior when favicon is missing or fails to load.",
    "priority": "medium",
    "ordinal": 2,
    "task_group_id": "7bde2797-2bcc-4f10-8814-513442bf950f",
    "parent_task_id": null,
    "ai_result": null,
    "id": "13c92502-37c1-4d05-aa92-1be67d331b4e",
    "created_at": "2025-10-23T14:57:25.767174Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Integrate source cards into chat thread display",
    "description": "Modify the chat thread component to fetch and display source cards for messages that have associated search sources",
    "details": "Update components/assistant-ui/thread.tsx to query and display sources for each assistant message. Add logic to fetch sources from the database for messages that have them, and render SourceCard components below the message content. Implement proper loading states and error handling. Ensure the sources are displayed in a visually appealing layout (e.g., grid or list format) that works well on different screen sizes. Update the message data structure to include sources information when streaming from the API.",
    "status": "pending",
    "test_strategy": "Create component tests to verify sources are correctly displayed when present and hidden when absent. Test the layout and responsive behavior of multiple source cards. Write integration tests to ensure proper data flow from API to UI component display.",
    "priority": "medium",
    "ordinal": 3,
    "task_group_id": "7bde2797-2bcc-4f10-8814-513442bf950f",
    "parent_task_id": null,
    "ai_result": null,
    "id": "b96d2a9f-11af-4241-9558-c950bd66a7f5",
    "created_at": "2025-10-23T14:57:25.767177Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  }
]